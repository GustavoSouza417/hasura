Execute os comandos abaixo, em ordem, para criar um DDN CLI com PostgreSQL


1) ddn doctor //comando apenas para diagnóstico
   Serve para analisar se tudo que o DDN CLI precisa para funcionar
   está funcionando normalmente. Se algo não estiver OK, você terá
   que arrumar.
   Com exceção da autenticação de Login, todas as outras dependências
   relatadas do Hasura envolvem o Docker.
   Esse comando pode demorar um pouco para executar.


2) ddn auth login
   Faz login, via web, no site do Hasura, o que automaticamente
   credencia o seu software DDN CLI


3) ddn supergraph init <Nome do Projeto> && cd <Nome do Projeto>
   Cria um projeto Hasura para você. Esse projeto será instanciado em uma
   pasta, de acordo com o nome que você der.
   Esse CD é só para te deslocar para a pasta do projeto.


4) ddn connector init <Nome do Conector> -i
   Cria um conector DDN para o projeto Hasura do diretório corrente.
   O nome padrão de conectores DDN de PostgreSQL é my_pg
   Contudo, você pode dar o nome que quiser.
   Você precisa pressionar ENTER algumas vezes, mesmo após selecionar o SGBD.
   Esse comando também exibirá qual porta o Adminer e o servidor PostgreSQL usam,
   como também te concederá uma url para utilizar outras GUI de PostgreSQL alternativas
   ao Adminer, caso você queira


5) docker compose -f app\connector\<Nome do Conector>\compose.postgres-adminer.yaml up -d
   Cria o contêiner do PostgreSQL e do Adminer a partir de um arquivo
   que é criado automaticamente após a inicialização do diretório do projeto,
   que se localiza onde a flag -f indica


6) ddn connector introspect <Nome do Conector>
   Procura quais tabelas estão criadas no banco de dados e as reconhece.
   Use esse comando antes de usar o comando número 8, senão você não conseguirá
   adicionar novas tabelas, afinal a DDN ainda não reconhece a existência delas.


7) ddn connector show-resources <Nome do Conector> //comando apenas para diagnóstico (não obrigatório para fazer a aplicação rodar)
   Exibe quais tabelas já foram introspectadas, ou seja, reconhecidas pela DDN.
   As que já foram adicionadas estarão marcadas como adicionadas, e as que estão
   apenas reconhecidas são marcadas como "available", ou seja, disponíveis para
   serem adicionadas.
   Isso ocorre porque a DDN pode reconhecer uma tabela, mas isso não significa que
   ela pode usar comandos GraphQL sobre ela, a menos que você a adicione.


8) ddn models add <Nome do Conector> <Nome da Tabela do SGBD>
   Serve para adicionar tabelas que você criou no SGBD ao Hasura. Dessa forma,
   ela passará a ser editável pelo Hasura e GraphQL.
   Lembrando que isso deve ser feito após a introspecção, senão a DDN não
   encontrará a tabela e dirá que ela não existe.


9) ddn model add <Nome do Conector> "*"
   Permite que qualquer tabela seja adicionada ao conector, sem ter que especificar
   o nome dela. Isso é útil quando você deseja adicionar várias tabelas de uma vez só


10) ddn command add <Nome do Conector> "*"
    Cria mutations de insert, update por ID e delete por ID para
    todas as tabelas já adicionadas


11) ddn relationship add <Nome do Conector> "*"
    Reconheça e ativa todos os relacionamentos entre tabelas já inspecionadas


12) ddn supergraph build local
   Cria um supergraph local, que é uma compilação local do seu projeto.
   Sempre que fizer alterações, compile novamente o seu projeto.


13) ddn run docker-start
    Cria três contêiners que inicializam os serviços do Hasura localmente
    O primeiro contêiner é o "Hasura Engine", que serve para gerenciamento
    O segundo é um contêiner para o DDN do seu projeto
    O terceiro, aparentemente, é para configurações
    Sempre que compilar seu projeto, execute esse comando novamente para que a
    nova compilação seja utilizada
    Executar esse comando novamente não criará novos contêiners "iguais". apenas
    sobrescreverá os já existentes
    Você não conseguirá executar o comando 11 (ddn console --local) sem esse
    contêiner em execução


14) ddn console --local
    Executa o Hasura DDN Console de forma local, na web